Only in ./new_batsched: build
Common subdirectories: ./batsched/ci and ./new_batsched/ci
Only in ./batsched: .clang-format
Common subdirectories: ./batsched/cmake and ./new_batsched/cmake
diff '--exclude=.git*' ./batsched/default.nix ./new_batsched/default.nix
31c31
<         pkgs.boost pkgs.gmp pkgs.rapidjson intervalset loguru redox pkgs.cppzmq pkgs.zeromq];
---
>         pkgs.boost pkgs.gmp pkgs.rapidjson intervalset loguru pkgs.cppzmq pkgs.zeromq];
39c39
<         cp batsched@exe/*.gcno $out/gcno/
---
>         cp batsched.p/*.gcno $out/gcno/
44,84c44,84
<     integration_tests = pkgs.stdenv.mkDerivation rec {
<       pname = "batsched-integration-tests";
<       version = toString builtins.currentTime; # Forces rebuild
<       src = pkgs.lib.sourceByRegex ./. [
<         "^test"
<         "^test/.*\.py"
<         "^test/platforms"
<         "^test/platforms/.*\.xml"
<         "^test/workloads"
<         "^test/workloads/.*\.json"
<       ];
<       buildInputs = with pkgs.python37Packages; [
<         batsim batsched batexpe pkgs.redis
<         pytest pytest_html pandas];
<       preBuild = pkgs.lib.optionalString doCoverage ''
<         mkdir -p gcda
<         export GCOV_PREFIX=$(realpath gcda)
<         export GCOV_PREFIX_STRIP=5
<       '';
<       buildPhase = ''
<         runHook preBuild
<         set +e
<         (cd test && pytest -ra --html=../report/pytest_report.html)
<         echo $? > ./pytest_returncode
<         set -e
<       '';
<       checkPhase = ''
<         pytest_return_code=$(cat ./pytest_returncode)
<         echo "pytest return code: $pytest_return_code"
<         if [ $pytest_return_code -ne 0 ] ; then
<           exit 1
<         fi
<       '';
<       inherit doCheck;
<       installPhase = ''
<         mkdir -p $out
<         mv ./report/* ./pytest_returncode $out/
<       '' + pkgs.lib.optionalString doCoverage ''
<         mv ./gcda $out/
<       '';
<     };
---
>     # integration_tests = pkgs.stdenv.mkDerivation rec {
>     #   pname = "batsched-integration-tests";
>     #   version = toString builtins.currentTime; # Forces rebuild
>     #   src = pkgs.lib.sourceByRegex ./. [
>     #     "^test"
>     #     "^test/.*\.py"
>     #     "^test/platforms"
>     #     "^test/platforms/.*\.xml"
>     #     "^test/workloads"
>     #     "^test/workloads/.*\.json"
>     #   ];
>     #   buildInputs = with pkgs.python37Packages; [
>     #     batsim batsched batexpe
>     #     pytest pytest_html pandas];
>     #   preBuild = pkgs.lib.optionalString doCoverage ''
>     #     mkdir -p gcda
>     #     export GCOV_PREFIX=$(realpath gcda)
>     #     export GCOV_PREFIX_STRIP=5
>     #   '';
>     #   buildPhase = ''
>     #     runHook preBuild
>     #     set +e
>     #     (cd test && pytest -ra --html=../report/pytest_report.html)
>     #     echo $? > ./pytest_returncode
>     #     set -e
>     #   '';
>     #   checkPhase = ''
>     #     pytest_return_code=$(cat ./pytest_returncode)
>     #     echo "pytest return code: $pytest_return_code"
>     #     if [ $pytest_return_code -ne 0 ] ; then
>     #       exit 1
>     #     fi
>     #   '';
>     #   inherit doCheck;
>     #   installPhase = ''
>     #     mkdir -p $out
>     #     mv ./report/* ./pytest_returncode $out/
>     #   '' + pkgs.lib.optionalString doCoverage ''
>     #     mv ./gcda $out/
>     #   '';
>     # };
86,90c86,90
<     integration_tests_batlatest = integration_tests.overrideAttrs (attr: rec {
<       buildInputs = with pkgs.python37Packages; [
<         batsim-master batsched batexpe pkgs.redis
<         pytest pytest_html pandas];
<     });
---
>     # integration_tests_batlatest = integration_tests.overrideAttrs (attr: rec {
>     #   buildInputs = with pkgs.python37Packages; [
>     #     batsim-master batsched batexpe
>     #     pytest pytest_html pandas];
>     # });
93,117c93,117
<     doxydoc = pkgs.stdenv.mkDerivation rec {
<       name = "batsim-doxygen-documentation";
<       src = pkgs.lib.sourceByRegex ./. [
<         "^src"
<         "^src/.*\.?pp"
<         "^doc"
<         "^doc/Doxyfile"
<         "^doc/doxygen_mainpage.md"
<       ];
<       buildInputs = [pkgs.doxygen];
<       buildPhase = "(cd doc && doxygen)";
<       installPhase = ''
<         mkdir -p $out
<         mv doc/doxygen_doc/html/* $out/
<       '';
<       checkPhase = ''
<         nb_warnings=$(cat doc/doxygen_warnings.log | wc -l)
<         if [[ $nb_warnings -gt 0 ]] ; then
<           echo "FAILURE: There are doxygen warnings!"
<           cat doc/doxygen_warnings.log
<           exit 1
<         fi
<       '';
<       doCheck = true;
<     };
---
>     # doxydoc = pkgs.stdenv.mkDerivation rec {
>     #   name = "batsim-doxygen-documentation";
>     #   src = pkgs.lib.sourceByRegex ./. [
>     #     "^src"
>     #     "^src/.*\.?pp"
>     #     "^doc"
>     #     "^doc/Doxyfile"
>     #     "^doc/doxygen_mainpage.md"
>     #   ];
>     #   buildInputs = [pkgs.doxygen];
>     #   buildPhase = "(cd doc && doxygen)";
>     #   installPhase = ''
>     #     mkdir -p $out
>     #     mv doc/doxygen_doc/html/* $out/
>     #   '';
>     #   checkPhase = ''
>     #     nb_warnings=$(cat doc/doxygen_warnings.log | wc -l)
>     #     if [[ $nb_warnings -gt 0 ]] ; then
>     #       echo "FAILURE: There are doxygen warnings!"
>     #       cat doc/doxygen_warnings.log
>     #       exit 1
>     #     fi
>     #   '';
>     #   doCheck = true;
>     # };
120,131c120,131
<     pytest_metadata = buildPythonPackage {
<       name = "pytest-metadata-1.8.0";
<       doCheck = false;
<       propagatedBuildInputs = [
<         pythonPackages.pytest
<         pythonPackages.setuptools_scm
<       ];
<       src = builtins.fetchurl {
<         url = "https://files.pythonhosted.org/packages/12/38/eed3a1e00c765e4da61e4e833de41c3458cef5d18e819d09f0f160682993/pytest-metadata-1.8.0.tar.gz";
<         sha256 = "1fk6icip2x1nh4kzhbc8cnqrs77avpqvj7ny3xadfh6yhn9aaw90";
<       };
<     };
---
>     # pytest_metadata = buildPythonPackage {
>     #   name = "pytest-metadata-1.8.0";
>     #   doCheck = false;
>     #   propagatedBuildInputs = [
>     #     pythonPackages.pytest
>     #     pythonPackages.setuptools_scm
>     #   ];
>     #   src = builtins.fetchurl {
>     #     url = "https://files.pythonhosted.org/packages/12/38/eed3a1e00c765e4da61e4e833de41c3458cef5d18e819d09f0f160682993/pytest-metadata-1.8.0.tar.gz";
>     #     sha256 = "1fk6icip2x1nh4kzhbc8cnqrs77avpqvj7ny3xadfh6yhn9aaw90";
>     #   };
>     # };
133,144c133,144
<     pytest_html = buildPythonPackage {
<       name = "pytest-html-1.20.0";
<       doCheck = false;
<       propagatedBuildInputs = [
<         pythonPackages.pytest
<         pytest_metadata
<       ];
<       src = builtins.fetchurl {
<         url = "https://files.pythonhosted.org/packages/08/3e/63d998f26c7846d3dac6da152d1b93db3670538c5e2fe18b88690c1f52a7/pytest-html-1.20.0.tar.gz";
<         sha256 = "17jyn4czkihrs225nkpj0h113hc03y0cl07myb70jkaykpfmrim7";
<       };
<     };
---
>     # pytest_html = buildPythonPackage {
>     #   name = "pytest-html-1.20.0";
>     #   doCheck = false;
>     #   propagatedBuildInputs = [
>     #     pythonPackages.pytest
>     #     pytest_metadata
>     #   ];
>     #   src = builtins.fetchurl {
>     #     url = "https://files.pythonhosted.org/packages/08/3e/63d998f26c7846d3dac6da152d1b93db3670538c5e2fe18b88690c1f52a7/pytest-html-1.20.0.tar.gz";
>     #     sha256 = "17jyn4czkihrs225nkpj0h113hc03y0cl07myb70jkaykpfmrim7";
>     #   };
>     # };
diff '--exclude=.git*' ./batsched/meson.build ./new_batsched/meson.build
4c4
<     default_options: ['cpp_std=c++11'],
---
>     default_options: ['cpp_std=c++17'],
8a9,10
> add_project_arguments(['-Wno-error'],language: 'cpp')
> add_project_link_arguments(['-lstdc++fs'], language : 'cpp')
29a32,86
> #    'src/algo/conservative_bf.cpp',
> #    'src/algo/conservative_bf.hpp',
> #    'src/algo/crasher.cpp',
> #    'src/algo/crasher.hpp',
>     
> #    'src/algo/easy_bf_fast.cpp',
> #    'src/algo/easy_bf_fast.hpp',
>     
> #    'src/algo/easy_bf_plot_liquid_load_horizon.cpp',
> #    'src/algo/easy_bf_plot_liquid_load_horizon.hpp',
> #    'src/algo/energy_bf.cpp',
> #    'src/algo/energy_bf_dicho.cpp',
> #    'src/algo/energy_bf_dicho.hpp',
> #    'src/algo/energy_bf.hpp',
> #    'src/algo/energy_bf_idle_sleeper.cpp',
> #    'src/algo/energy_bf_idle_sleeper.hpp',
> #    'src/algo/energy_bf_machine_subpart_sleeper.cpp',
> #    'src/algo/energy_bf_machine_subpart_sleeper.hpp',
> #    'src/algo/energy_bf_monitoring_inertial_shutdown.cpp',
> #    'src/algo/energy_bf_monitoring_inertial_shutdown.hpp',
> #    'src/algo/energy_bf_monitoring_period.cpp',
> #    'src/algo/energy_bf_monitoring_period.hpp',
> #    'src/algo/energy_watcher.cpp',
> #    'src/algo/energy_watcher.hpp',
> #    'src/algo/fcfs_fast.cpp',
> #    'src/algo/fcfs_fast.hpp',
> #    'src/algo/filler.hpp',
> #    'src/algo/filler.cpp',
> #    'src/algo/killer2.cpp',
> #    'src/algo/killer2.hpp',
> #    'src/algo/killer.cpp',
> #    'src/algo/killer.hpp',
> #    'src/algo/random.cpp',
> #    'src/algo/random.hpp',
> #    'src/algo/rejecter.cpp',
> #    'src/algo/rejecter.hpp',
> #    'src/algo/sequencer.cpp',
> #    'src/algo/sequencer.hpp',
> #    'src/algo/sleeper.cpp',
> #    'src/algo/sleeper.hpp',
> #    'src/algo/submitter.cpp',
> #    'src/algo/submitter.hpp',
> #    'src/algo/wt_estimator.cpp',
> #    'src/algo/wt_estimator.hpp',
> #    'src/algo/easy_bf_fast2.cpp',
> #    'src/algo/easy_bf_fast2.hpp',
> #    'src/algo/easy_bf_fast2_holdback.cpp',
> #    'src/algo/easy_bf_fast2_holdback.hpp',
> #    'src/algo/fcfs_fast2.cpp',
> #    'src/algo/fcfs_fast2.hpp',
> #    'src/algo/conservative_bf.cpp',
> #    'src/algo/conservative_bf.hpp',
> #    'src/data_storage.cpp',
> #    'src/data_storage.hpp'
> 
31,34d87
<     'src/algo/conservative_bf.cpp',
<     'src/algo/conservative_bf.hpp',
<     'src/algo/crasher.cpp',
<     'src/algo/crasher.hpp',
36,37d88
<     'src/algo/easy_bf_fast.cpp',
<     'src/algo/easy_bf_fast.hpp',
39,76c90,99
<     'src/algo/easy_bf_plot_liquid_load_horizon.cpp',
<     'src/algo/easy_bf_plot_liquid_load_horizon.hpp',
<     'src/algo/energy_bf.cpp',
<     'src/algo/energy_bf_dicho.cpp',
<     'src/algo/energy_bf_dicho.hpp',
<     'src/algo/energy_bf.hpp',
<     'src/algo/energy_bf_idle_sleeper.cpp',
<     'src/algo/energy_bf_idle_sleeper.hpp',
<     'src/algo/energy_bf_machine_subpart_sleeper.cpp',
<     'src/algo/energy_bf_machine_subpart_sleeper.hpp',
<     'src/algo/energy_bf_monitoring_inertial_shutdown.cpp',
<     'src/algo/energy_bf_monitoring_inertial_shutdown.hpp',
<     'src/algo/energy_bf_monitoring_period.cpp',
<     'src/algo/energy_bf_monitoring_period.hpp',
<     'src/algo/energy_watcher.cpp',
<     'src/algo/energy_watcher.hpp',
<     'src/algo/fcfs_fast.cpp',
<     'src/algo/fcfs_fast.hpp',
<     'src/algo/fcfs.cpp',
<     'src/algo/fcfs.hpp',
<     'src/algo/filler.cpp',
<     'src/algo/filler.hpp',
<     'src/algo/killer2.cpp',
<     'src/algo/killer2.hpp',
<     'src/algo/killer.cpp',
<     'src/algo/killer.hpp',
<     'src/algo/random.cpp',
<     'src/algo/random.hpp',
<     'src/algo/rejecter.cpp',
<     'src/algo/rejecter.hpp',
<     'src/algo/sequencer.cpp',
<     'src/algo/sequencer.hpp',
<     'src/algo/sleeper.cpp',
<     'src/algo/sleeper.hpp',
<     'src/algo/submitter.cpp',
<     'src/algo/submitter.hpp',
<     'src/algo/wt_estimator.cpp',
<     'src/algo/wt_estimator.hpp',
---
>     'src/algo/easy_bf_fast2.cpp',
>     'src/algo/easy_bf_fast2.hpp',
>     'src/algo/easy_bf_fast2_holdback.cpp',
>     'src/algo/easy_bf_fast2_holdback.hpp',
>     'src/algo/fcfs_fast2.cpp',
>     'src/algo/fcfs_fast2.hpp',
>     'src/algo/conservative_bf.cpp',
>     'src/algo/conservative_bf.hpp',
>     'src/batsched_tools.cpp',
>     'src/batsched_tools.hpp',
89a113,114
>     'src/machine.cpp',
>     'src/machine.hpp',
101c126,135
<     'src/schedule.hpp'
---
>     'src/schedule.hpp',
>     'src/external/batsched_workload.hpp',
>     'src/external/batsched_workload.cpp',
>     'src/external/batsched_profile.hpp',
>     'src/external/batsched_profile.cpp',
>     'src/external/batsched_job.hpp',
>     'src/external/batsched_job.cpp'
>     
>     
>     
diff '--exclude=.git*' ./batsched/release.nix ./new_batsched/release.nix
31c31
<         pkgs.boost pkgs.gmp pkgs.rapidjson intervalset loguru redox pkgs.cppzmq pkgs.zeromq];
---
>         pkgs.boost pkgs.gmp pkgs.rapidjson intervalset loguru pkgs.cppzmq pkgs.zeromq];
39c39
<         cp batsched@exe/*.gcno $out/gcno/
---
>         cp batsched.p/*.gcno $out/gcno/
44,84c44,84
<     integration_tests = pkgs.stdenv.mkDerivation rec {
<       pname = "batsched-integration-tests";
<       version = toString builtins.currentTime; # Forces rebuild
<       src = pkgs.lib.sourceByRegex ./. [
<         "^test"
<         "^test/.*\.py"
<         "^test/platforms"
<         "^test/platforms/.*\.xml"
<         "^test/workloads"
<         "^test/workloads/.*\.json"
<       ];
<       buildInputs = with pkgs.python37Packages; [
<         batsim batsched batexpe pkgs.redis
<         pytest pytest_html pandas];
<       preBuild = pkgs.lib.optionalString doCoverage ''
<         mkdir -p gcda
<         export GCOV_PREFIX=$(realpath gcda)
<         export GCOV_PREFIX_STRIP=5
<       '';
<       buildPhase = ''
<         runHook preBuild
<         set +e
<         (cd test && pytest -ra --html=../report/pytest_report.html)
<         echo $? > ./pytest_returncode
<         set -e
<       '';
<       checkPhase = ''
<         pytest_return_code=$(cat ./pytest_returncode)
<         echo "pytest return code: $pytest_return_code"
<         if [ $pytest_return_code -ne 0 ] ; then
<           exit 1
<         fi
<       '';
<       inherit doCheck;
<       installPhase = ''
<         mkdir -p $out
<         mv ./report/* ./pytest_returncode $out/
<       '' + pkgs.lib.optionalString doCoverage ''
<         mv ./gcda $out/
<       '';
<     };
---
>     # integration_tests = pkgs.stdenv.mkDerivation rec {
>     #   pname = "batsched-integration-tests";
>     #   version = toString builtins.currentTime; # Forces rebuild
>     #   src = pkgs.lib.sourceByRegex ./. [
>     #     "^test"
>     #     "^test/.*\.py"
>     #     "^test/platforms"
>     #     "^test/platforms/.*\.xml"
>     #     "^test/workloads"
>     #     "^test/workloads/.*\.json"
>     #   ];
>     #   buildInputs = with pkgs.python37Packages; [
>     #     batsim batsched batexpe
>     #     pytest pytest_html pandas];
>     #   preBuild = pkgs.lib.optionalString doCoverage ''
>     #     mkdir -p gcda
>     #     export GCOV_PREFIX=$(realpath gcda)
>     #     export GCOV_PREFIX_STRIP=5
>     #   '';
>     #   buildPhase = ''
>     #     runHook preBuild
>     #     set +e
>     #     (cd test && pytest -ra --html=../report/pytest_report.html)
>     #     echo $? > ./pytest_returncode
>     #     set -e
>     #   '';
>     #   checkPhase = ''
>     #     pytest_return_code=$(cat ./pytest_returncode)
>     #     echo "pytest return code: $pytest_return_code"
>     #     if [ $pytest_return_code -ne 0 ] ; then
>     #       exit 1
>     #     fi
>     #   '';
>     #   inherit doCheck;
>     #   installPhase = ''
>     #     mkdir -p $out
>     #     mv ./report/* ./pytest_returncode $out/
>     #   '' + pkgs.lib.optionalString doCoverage ''
>     #     mv ./gcda $out/
>     #   '';
>     # };
86,90c86,90
<     integration_tests_batlatest = integration_tests.overrideAttrs (attr: rec {
<       buildInputs = with pkgs.python37Packages; [
<         batsim-master batsched batexpe pkgs.redis
<         pytest pytest_html pandas];
<     });
---
>     # integration_tests_batlatest = integration_tests.overrideAttrs (attr: rec {
>     #   buildInputs = with pkgs.python37Packages; [
>     #     batsim-master batsched batexpe
>     #     pytest pytest_html pandas];
>     # });
93,117c93,117
<     doxydoc = pkgs.stdenv.mkDerivation rec {
<       name = "batsim-doxygen-documentation";
<       src = pkgs.lib.sourceByRegex ./. [
<         "^src"
<         "^src/.*\.?pp"
<         "^doc"
<         "^doc/Doxyfile"
<         "^doc/doxygen_mainpage.md"
<       ];
<       buildInputs = [pkgs.doxygen];
<       buildPhase = "(cd doc && doxygen)";
<       installPhase = ''
<         mkdir -p $out
<         mv doc/doxygen_doc/html/* $out/
<       '';
<       checkPhase = ''
<         nb_warnings=$(cat doc/doxygen_warnings.log | wc -l)
<         if [[ $nb_warnings -gt 0 ]] ; then
<           echo "FAILURE: There are doxygen warnings!"
<           cat doc/doxygen_warnings.log
<           exit 1
<         fi
<       '';
<       doCheck = true;
<     };
---
>     # doxydoc = pkgs.stdenv.mkDerivation rec {
>     #   name = "batsim-doxygen-documentation";
>     #   src = pkgs.lib.sourceByRegex ./. [
>     #     "^src"
>     #     "^src/.*\.?pp"
>     #     "^doc"
>     #     "^doc/Doxyfile"
>     #     "^doc/doxygen_mainpage.md"
>     #   ];
>     #   buildInputs = [pkgs.doxygen];
>     #   buildPhase = "(cd doc && doxygen)";
>     #   installPhase = ''
>     #     mkdir -p $out
>     #     mv doc/doxygen_doc/html/* $out/
>     #   '';
>     #   checkPhase = ''
>     #     nb_warnings=$(cat doc/doxygen_warnings.log | wc -l)
>     #     if [[ $nb_warnings -gt 0 ]] ; then
>     #       echo "FAILURE: There are doxygen warnings!"
>     #       cat doc/doxygen_warnings.log
>     #       exit 1
>     #     fi
>     #   '';
>     #   doCheck = true;
>     # };
120,131c120,131
<     pytest_metadata = buildPythonPackage {
<       name = "pytest-metadata-1.8.0";
<       doCheck = false;
<       propagatedBuildInputs = [
<         pythonPackages.pytest
<         pythonPackages.setuptools_scm
<       ];
<       src = builtins.fetchurl {
<         url = "https://files.pythonhosted.org/packages/12/38/eed3a1e00c765e4da61e4e833de41c3458cef5d18e819d09f0f160682993/pytest-metadata-1.8.0.tar.gz";
<         sha256 = "1fk6icip2x1nh4kzhbc8cnqrs77avpqvj7ny3xadfh6yhn9aaw90";
<       };
<     };
---
>     # pytest_metadata = buildPythonPackage {
>     #   name = "pytest-metadata-1.8.0";
>     #   doCheck = false;
>     #   propagatedBuildInputs = [
>     #     pythonPackages.pytest
>     #     pythonPackages.setuptools_scm
>     #   ];
>     #   src = builtins.fetchurl {
>     #     url = "https://files.pythonhosted.org/packages/12/38/eed3a1e00c765e4da61e4e833de41c3458cef5d18e819d09f0f160682993/pytest-metadata-1.8.0.tar.gz";
>     #     sha256 = "1fk6icip2x1nh4kzhbc8cnqrs77avpqvj7ny3xadfh6yhn9aaw90";
>     #   };
>     # };
133,144c133,144
<     pytest_html = buildPythonPackage {
<       name = "pytest-html-1.20.0";
<       doCheck = false;
<       propagatedBuildInputs = [
<         pythonPackages.pytest
<         pytest_metadata
<       ];
<       src = builtins.fetchurl {
<         url = "https://files.pythonhosted.org/packages/08/3e/63d998f26c7846d3dac6da152d1b93db3670538c5e2fe18b88690c1f52a7/pytest-html-1.20.0.tar.gz";
<         sha256 = "17jyn4czkihrs225nkpj0h113hc03y0cl07myb70jkaykpfmrim7";
<       };
<     };
---
>     # pytest_html = buildPythonPackage {
>     #   name = "pytest-html-1.20.0";
>     #   doCheck = false;
>     #   propagatedBuildInputs = [
>     #     pythonPackages.pytest
>     #     pytest_metadata
>     #   ];
>     #   src = builtins.fetchurl {
>     #     url = "https://files.pythonhosted.org/packages/08/3e/63d998f26c7846d3dac6da152d1b93db3670538c5e2fe18b88690c1f52a7/pytest-html-1.20.0.tar.gz";
>     #     sha256 = "17jyn4czkihrs225nkpj0h113hc03y0cl07myb70jkaykpfmrim7";
>     #   };
>     # };
Common subdirectories: ./batsched/src and ./new_batsched/src
Common subdirectories: ./batsched/test and ./new_batsched/test
